plugins {
    id 'com.android.application' version '8.7.0-alpha07'
    id 'org.jetbrains.kotlin.android' version '2.0.20'
}

static def getEnvOrDefault(String envVar, String defaultValue) {
    def value = System.getenv(envVar)
    return value ?: defaultValue

}

def getVersionCode = {
    def isMainBranch = System.getenv('IS_MAIN_BRANCH') == 'true'

    def baseDateSeconds = 9939458
    if (isMainBranch) {
        baseDateSeconds += Integer.parseInt(System.getenv("GITHUB_RUN_NUMBER"))
    }

    return baseDateSeconds
}

def getCFApiKey = {
    String key = System.getenv("CURSEFORGE_API_KEY")
    if(key != null) return key
    File curseforgeKeyFile = new File("./curseforge_key.txt")
    if(curseforgeKeyFile.canRead() && curseforgeKeyFile.isFile()) {
        return curseforgeKeyFile.text
    }
    logger.warn('BUILD: You have no CurseForge key, the curseforge api will get disabled !')
    return "DUMMY"
}

def getBranchName = {
    getEnvOrDefault('IS_MAIN_BRANCH', 'false') == 'true' ? 'main' : 'other'
}

def getApiToken = {
    getEnvOrDefault('MY_API_TOKEN', 'DUMMY')
}

def getPrivateApiToken = {
    getEnvOrDefault('MY_PRIVATE_API_TOKEN', 'DUMMY')
}

configurations {
    instrumentedClasspath {
        canBeConsumed = false
        canBeResolved = true
    }
}

android {
    namespace 'net.kdt.pojavlaunch'

    compileSdk = 35

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        releaseBuild {
            def pwd = System.getenv("KEYSTORE_PASSWORD")
            storeFile file("firefly.jks")
            storePassword pwd
            keyAlias "Firefly"
            keyPassword pwd
        }
        customDebug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    defaultConfig {
        applicationId "net.kdt.pojavlaunch.zh.firefly"
        minSdkVersion 24
        targetSdkVersion 35
        versionCode getVersionCode()
        versionName "1.2.8"
        multiDexEnabled true //important
        resValue 'string', 'curseforge_api_key', getCFApiKey()
        resValue 'string', 'zh_branch_info', getBranchName()
        resValue 'string', 'zh_api_token', getApiToken()
        resValue 'string', 'zh_private_api_token', getPrivateApiToken()
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.customDebug
            resValue 'string', 'application_package', 'net.kdt.pojavlaunch.zh.firefly.debug'
            resValue 'string', 'storageProviderAuthorities', 'net.kdt.pojavlaunch.scoped.gamefolder.zh.firefly.debug'
            }

        release {
            // Don't set to true or java.awt will be a.a or something similar.
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // defaultConfig already set
            // multiDexEnabled = true
            // debuggable = true
            resValue 'string', 'application_package', 'net.kdt.pojavlaunch.zh.firefly'
            resValue 'string', 'storageProviderAuthorities', 'net.kdt.pojavlaunch.scoped.gamefolder.zh.firefly'
            signingConfig signingConfigs.releaseBuild
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            def abi = output.getFilter(ABI)
            if (abi == null) {
            abi = "all"
        }
        variant.mergeAssetsProvider.get().doLast {
            def arch = System.getProperty("arch", "all")
            def assetsDir = mergeAssetsProvider.get().outputDir.get()
            def java = ['jre-8', 'jre-11', 'jre-17', 'jre-21']
            println(arch)
            java.forEach { String str ->
                def runtimeDir = new File([assetsDir, "components/" + str].join(File.separator))
                println(runtimeDir)
                def files = fileTree(dir: runtimeDir, include: ['*.tar.xz'])
                files.forEach { File file ->
                    if (arch != 'all' && !file.getName().contains(arch) && !file.getName().contains("universal")) {
                        print("delete:${file} :")
                        println(delete(file))
                    }
                }
            }
        }
        outputFileName = "PZH-X-PGW-${variant.buildType.name}-${abi}.apk"
        }
    }
    splits {
        def arch = System.getProperty("arch", "all")
        if (arch != 'all') {
            abi {
                enable true
                reset()
                switch (arch) {
                    case 'arm':
                        include 'armeabi-v7a'
                        break
                    case 'arm64':
                        include 'arm64-v8a'
                        break
                    case 'x86':
                        include 'x86'
                        break
                    case 'x86_64':
                        include 'x86_64'
                        break
                }
            }
        }
    }

    ndkVersion = "26.3.11579264"

    externalNativeBuild {
        ndkBuild {
            path file('src/main/jni/Android.mk')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
        pickFirst '**/libbytehook.so'
        exclude '**/libawt_headless.so'
    }

    buildFeatures {
        prefab true
    }

    buildToolsVersion = '35.0.0'

    kotlinOptions {
        jvmTarget = '21'
    }

}

dependencies {
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    implementation 'commons-codec:commons-codec:1.17.1'
    // implementation 'com.wu-man:android-bsf-api:3.1.3'
    implementation 'androidx.preference:preference:1.2.1'
    //implementation 'androidx.core:core:1.7.0'
    implementation 'androidx.drawerlayout:drawerlayout:1.2.0'
    implementation 'androidx.viewpager2:viewpager2:1.1.0'
    implementation 'androidx.annotation:annotation:1.9.0-alpha01'

    implementation "androidx.constraintlayout:constraintlayout:2.1.4"

    implementation 'com.github.duanhong169:checkerboarddrawable:1.0.2'
    implementation 'com.github.PojavLauncherTeam:portrait-sdp:ed33e89cbc'
    implementation 'com.github.PojavLauncherTeam:portrait-ssp:6c02fd739b'
    implementation 'com.github.Mathias-Boulay:ExtendedView:1.0.0'
    implementation 'com.github.Mathias-Boulay:android_gamepad_remapper:06184ddbce'
    implementation 'com.github.Mathias-Boulay:virtual-joystick-android:2e7aa25e50'

    // implementation 'com.intuit.sdp:sdp-android:1.0.5'
    // implementation 'com.intuit.ssp:ssp-android:1.0.5'

    implementation 'org.tukaani:xz:1.10'
    // Our version of exp4j can be built from source at
    // https://github.com/PojavLauncherTeam/exp4j
    implementation 'net.sourceforge.htmlcleaner:htmlcleaner:2.29'

    // implementation 'net.sourceforge.streamsupport:streamsupport-cfuture:1.7.0'

    implementation fileTree(dir: 'libs', include: ['*'])

    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.14'
    implementation 'org.commonmark:commonmark:0.22.0'
    implementation 'com.google.android.material:material:1.13.0-alpha04'
    implementation 'androidx.core:core-ktx:1.15.0-alpha02'
    implementation 'joda-time:joda-time:2.12.7'
    implementation 'com.daimajia.androidanimations:library:2.4@aar'
}
